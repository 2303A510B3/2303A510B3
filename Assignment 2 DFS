{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPQtXCntjHTyjEWKmne0rVW",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/2303A510B3/2303A510B3/blob/main/Assignment%202%20DFS\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Wi54lKIBRqMA",
        "outputId": "fef799cc-346a-49da-87cd-077561371391"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'nbformat': 4,\n",
              " 'nbformat_minor': 0,\n",
              " 'metadata': {'colab': {'provenance': [],\n",
              "   'authorship_tag': 'ABX9TyMMOPVK/VJt4ogX2EIk8+KZ'},\n",
              "  'kernelspec': {'name': 'python3', 'display_name': 'Python 3'},\n",
              "  'language_info': {'name': 'python'}},\n",
              " 'cells': [{'cell_type': 'markdown',\n",
              "   'metadata': {'id': 'view-in-github', 'colab_type': 'text'},\n",
              "   'source': ['<a href=\"https://colab.research.google.com/github/2303a51840/2303a51840/blob/main/Ass%202-DFS\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>']},\n",
              "  {'cell_type': 'code',\n",
              "   'execution_count': 1,\n",
              "   'metadata': {'colab': {'base_uri': 'https://localhost:8080/'},\n",
              "    'id': 'gw_TEcqRSbLM',\n",
              "    'outputId': '904a381b-5db0-4ed3-8680-8edf291f4738'},\n",
              "   'outputs': [{'output_type': 'stream',\n",
              "     'name': 'stdout',\n",
              "     'text': [\"['D', 'C', 'E', 'H', 'G', 'F', 'S', 'A', 'B']\\n\"]},\n",
              "    {'output_type': 'execute_result',\n",
              "     'data': {'text/plain': [\"['D', 'C', 'E', 'H', 'G', 'F', 'S', 'A', 'B']\"]},\n",
              "     'metadata': {},\n",
              "     'execution_count': 1}],\n",
              "   'source': ['#Implement Depth First Search Algorithm\\n',\n",
              "    '\\n',\n",
              "    '\\n',\n",
              "    'graph1 = {\\n',\n",
              "    \"    'A' : ['B','S'],\\n\",\n",
              "    \"    'B' : ['A'],\\n\",\n",
              "    \"    'C' : ['D','E','F','S'],\\n\",\n",
              "    \"    'D' : ['C'],\\n\",\n",
              "    \"    'E' : ['C','H'],\\n\",\n",
              "    \"    'F' : ['C','G'],\\n\",\n",
              "    \"    'G' : ['F','S'],\\n\",\n",
              "    \"    'H' : ['E','G'],\\n\",\n",
              "    \"    'S' : ['A','C','G']\\n\",\n",
              "    '}\\n',\n",
              "    '\\n',\n",
              "    'def dfs(graph, node, visited):\\n',\n",
              "    '    if node not in visited:\\n',\n",
              "    '        visited.append(node)\\n',\n",
              "    '        for k in graph[node]:\\n',\n",
              "    '            dfs(graph,k, visited)\\n',\n",
              "    '    return visited\\n',\n",
              "    '\\n',\n",
              "    \"visited = dfs(graph1,'D', [])\\n\",\n",
              "    'print(visited)\\n',\n",
              "    '\\n',\n",
              "    \"['D', 'C', 'E', 'H', 'G', 'F', 'S', 'A', 'B']\"]}]}"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ],
      "source": [
        "{\n",
        "  \"nbformat\": 4,\n",
        "  \"nbformat_minor\": 0,\n",
        "  \"metadata\": {\n",
        "    \"colab\": {\n",
        "      \"provenance\": [],\n",
        "      \"authorship_tag\": \"ABX9TyMMOPVK/VJt4ogX2EIk8+KZ\",\n",
        "\n",
        "    },\n",
        "    \"kernelspec\": {\n",
        "      \"name\": \"python3\",\n",
        "      \"display_name\": \"Python 3\"\n",
        "    },\n",
        "    \"language_info\": {\n",
        "      \"name\": \"python\"\n",
        "    }\n",
        "  },\n",
        "  \"cells\": [\n",
        "    {\n",
        "      \"cell_type\": \"markdown\",\n",
        "      \"metadata\": {\n",
        "        \"id\": \"view-in-github\",\n",
        "        \"colab_type\": \"text\"\n",
        "      },\n",
        "      \"source\": [\n",
        "        \"<a href=\\\"https://colab.research.google.com/github/2303a51840/2303a51840/blob/main/Ass%202-DFS\\\" target=\\\"_parent\\\"><img src=\\\"https://colab.research.google.com/assets/colab-badge.svg\\\" alt=\\\"Open In Colab\\\"/></a>\"\n",
        "      ]\n",
        "    },\n",
        "    {\n",
        "      \"cell_type\": \"code\",\n",
        "      \"execution_count\": 1,\n",
        "      \"metadata\": {\n",
        "        \"colab\": {\n",
        "          \"base_uri\": \"https://localhost:8080/\"\n",
        "        },\n",
        "        \"id\": \"gw_TEcqRSbLM\",\n",
        "        \"outputId\": \"904a381b-5db0-4ed3-8680-8edf291f4738\"\n",
        "      },\n",
        "      \"outputs\": [\n",
        "        {\n",
        "          \"output_type\": \"stream\",\n",
        "          \"name\": \"stdout\",\n",
        "          \"text\": [\n",
        "            \"['D', 'C', 'E', 'H', 'G', 'F', 'S', 'A', 'B']\\n\"\n",
        "          ]\n",
        "        },\n",
        "        {\n",
        "          \"output_type\": \"execute_result\",\n",
        "          \"data\": {\n",
        "            \"text/plain\": [\n",
        "              \"['D', 'C', 'E', 'H', 'G', 'F', 'S', 'A', 'B']\"\n",
        "            ]\n",
        "          },\n",
        "          \"metadata\": {},\n",
        "          \"execution_count\": 1\n",
        "        }\n",
        "      ],\n",
        "      \"source\": [\n",
        "        \"#Implement Depth First Search Algorithm\\n\",\n",
        "        \"\\n\",\n",
        "        \"\\n\",\n",
        "        \"graph1 = {\\n\",\n",
        "        \"    'A' : ['B','S'],\\n\",\n",
        "        \"    'B' : ['A'],\\n\",\n",
        "        \"    'C' : ['D','E','F','S'],\\n\",\n",
        "        \"    'D' : ['C'],\\n\",\n",
        "        \"    'E' : ['C','H'],\\n\",\n",
        "        \"    'F' : ['C','G'],\\n\",\n",
        "        \"    'G' : ['F','S'],\\n\",\n",
        "        \"    'H' : ['E','G'],\\n\",\n",
        "        \"    'S' : ['A','C','G']\\n\",\n",
        "        \"}\\n\",\n",
        "        \"\\n\",\n",
        "        \"def dfs(graph, node, visited):\\n\",\n",
        "        \"    if node not in visited:\\n\",\n",
        "        \"        visited.append(node)\\n\",\n",
        "        \"        for k in graph[node]:\\n\",\n",
        "        \"            dfs(graph,k, visited)\\n\",\n",
        "        \"    return visited\\n\",\n",
        "        \"\\n\",\n",
        "        \"visited = dfs(graph1,'D', [])\\n\",\n",
        "        \"print(visited)\\n\",\n",
        "        \"\\n\",\n",
        "        \"['D', 'C', 'E', 'H', 'G', 'F', 'S', 'A', 'B']\"\n",
        "      ]\n",
        "    }\n",
        "  ]\n",
        "}"
      ]
    }
  ]
}
{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMcw5vH0kV9OrYLUfQlBgmv",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/2303A510B3/2303A510B3/blob/main/Assignment-%202%20part-2%20A*\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oq86i96IT190",
        "outputId": "2f6810eb-7e70-4749-eb9b-6827b7e9de52"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'nbformat': 4,\n",
              " 'nbformat_minor': 0,\n",
              " 'metadata': {'colab': {'provenance': [],\n",
              "   'authorship_tag': 'ABX9TyPUiGHT/vG7PaWeoGCu7E4N'},\n",
              "  'kernelspec': {'name': 'python3', 'display_name': 'Python 3'},\n",
              "  'language_info': {'name': 'python'}},\n",
              " 'cells': [{'cell_type': 'markdown',\n",
              "   'metadata': {'id': 'view-in-github', 'colab_type': 'text'},\n",
              "   'source': ['<a href=\"https://colab.research.google.com/github/2303a51840/2303a51840/blob/main/ASS2-PART%202%20A*\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>']},\n",
              "  {'cell_type': 'code',\n",
              "   'execution_count': 1,\n",
              "   'metadata': {'colab': {'base_uri': 'https://localhost:8080/'},\n",
              "    'id': 'Me368F7OTVhV',\n",
              "    'outputId': 'eaa770b1-ef08-42d8-cea7-4eff517932a2'},\n",
              "   'outputs': [{'output_type': 'stream',\n",
              "     'name': 'stdout',\n",
              "     'text': [' The 8 puzzle is solvable \\n',\n",
              "      '\\n',\n",
              "      '   2 8 3\\n',\n",
              "      '   7 1 4\\n',\n",
              "      '   0 6 5\\n',\n",
              "      '\\n',\n",
              "      '   2 8 3\\n',\n",
              "      '   0 1 4\\n',\n",
              "      '   7 6 5\\n',\n",
              "      '\\n',\n",
              "      '   2 8 3\\n',\n",
              "      '   1 0 4\\n',\n",
              "      '   7 6 5\\n',\n",
              "      '\\n',\n",
              "      '   2 0 3\\n',\n",
              "      '   1 8 4\\n',\n",
              "      '   7 6 5\\n',\n",
              "      '\\n',\n",
              "      '   0 2 3\\n',\n",
              "      '   1 8 4\\n',\n",
              "      '   7 6 5\\n',\n",
              "      '\\n',\n",
              "      '   1 2 3\\n',\n",
              "      '   0 8 4\\n',\n",
              "      '   7 6 5\\n',\n",
              "      '\\n',\n",
              "      '   1 2 3\\n',\n",
              "      '   8 0 4\\n',\n",
              "      '   7 6 5\\n',\n",
              "      '\\n',\n",
              "      'Steps to reach goal: 6\\n',\n",
              "      'Total nodes visited:  11 \\n',\n",
              "      '\\n']},\n",
              "    {'output_type': 'stream',\n",
              "     'name': 'stderr',\n",
              "     'text': ['<ipython-input-1-1d5712b152d4>:67: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\\n',\n",
              "      '  blank = int(np.where(puzzle == 0)[0])\\n']}],\n",
              "   'source': ['#Implementation of A* Algorithm / OR Graph Search\\n',\n",
              "    '\\n',\n",
              "    '\\n',\n",
              "    'from copy import deepcopy\\n',\n",
              "    'import numpy as np\\n',\n",
              "    'import time\\n',\n",
              "    '\\n',\n",
              "    'def bestsolution(state):\\n',\n",
              "    '    bestsol = np.array([], int).reshape(-1, 9)\\n',\n",
              "    '    count = len(state) - 1\\n',\n",
              "    '    while count != -1:\\n',\n",
              "    \"        bestsol = np.insert(bestsol, 0, state[count]['puzzle'], 0)\\n\",\n",
              "    \"        count = (state[count]['parent'])\\n\",\n",
              "    '    return bestsol.reshape(-1, 3, 3)\\n',\n",
              "    '\\n',\n",
              "    '\\n',\n",
              "    '# checks for the uniqueness of the iteration(it).\\n',\n",
              "    'def all(checkarray):\\n',\n",
              "    '    set=[]\\n',\n",
              "    '    for it in set:\\n',\n",
              "    '        for checkarray in it:\\n',\n",
              "    '            return 1\\n',\n",
              "    '        else:\\n',\n",
              "    '            return 0\\n',\n",
              "    '\\n',\n",
              "    '\\n',\n",
              "    '# number of misplaced tiles\\n',\n",
              "    'def misplaced_tiles(puzzle,goal):\\n',\n",
              "    '    mscost = np.sum(puzzle != goal) - 1\\n',\n",
              "    '    return mscost if mscost > 0 else 0\\n',\n",
              "    '\\n',\n",
              "    '\\n',\n",
              "    'def coordinates(puzzle):\\n',\n",
              "    '    pos = np.array(range(9))\\n',\n",
              "    '    for p, q in enumerate(puzzle):\\n',\n",
              "    '        pos[q] = p\\n',\n",
              "    '    return pos\\n',\n",
              "    '\\n',\n",
              "    '# start of 8 puzzle evaluvation, using Misplaced tiles heuristics\\n',\n",
              "    'def evaluvate_misplaced(puzzle, goal):\\n',\n",
              "    \"    steps = np.array([('up', [0, 1, 2], -3),('down', [6, 7, 8],  3),('left', [0, 3, 6], -1),('right', [2, 5, 8],  1)],\\n\",\n",
              "    \"                dtype =  [('move',  str, 1),('position', list),('head', int)])\\n\",\n",
              "    '\\n',\n",
              "    \"    dtstate = [('puzzle',  list),('parent', int),('gn',  int),('hn',  int)]\\n\",\n",
              "    '\\n',\n",
              "    '    costg = coordinates(goal)\\n',\n",
              "    '\\n',\n",
              "    '    # initializing the parent, gn and hn, where hn is misplaced_tiles  function call\\n',\n",
              "    '    parent = -1\\n',\n",
              "    '    gn = 0\\n',\n",
              "    '    hn = misplaced_tiles(coordinates(puzzle), costg)\\n',\n",
              "    '    state = np.array([(puzzle, parent, gn, hn)], dtstate)\\n',\n",
              "    '\\n',\n",
              "    '   #priority queues with position as keys and fn as value.\\n',\n",
              "    \"    dtpriority = [('position', int),('fn', int)]\\n\",\n",
              "    '\\n',\n",
              "    '    priority = np.array([(0, hn)], dtpriority)\\n',\n",
              "    '\\n',\n",
              "    '    while 1:\\n',\n",
              "    \"        priority = np.sort(priority, kind='mergesort', order=['fn', 'position'])\\n\",\n",
              "    '        position, fn = priority[0]\\n',\n",
              "    '        # sort priority queue using merge sort,the first element is picked for exploring.\\n',\n",
              "    '        priority = np.delete(priority, 0, 0)\\n',\n",
              "    '        puzzle, parent, gn, hn = state[position]\\n',\n",
              "    '        puzzle = np.array(puzzle)\\n',\n",
              "    '\\n',\n",
              "    '        blank = int(np.where(puzzle == 0)[0])\\n',\n",
              "    '\\n',\n",
              "    '        gn = gn + 1\\n',\n",
              "    '        c = 1\\n',\n",
              "    '        start_time = time.time()\\n',\n",
              "    '        for s in steps:\\n',\n",
              "    '            c = c + 1\\n',\n",
              "    \"            if blank not in s['position']:\\n\",\n",
              "    '                openstates = deepcopy(puzzle)\\n',\n",
              "    \"                openstates[blank], openstates[blank + s['head']] = openstates[blank + s['head']], openstates[blank]\\n\",\n",
              "    '\\n',\n",
              "    \"                if ~(np.all(list(state['puzzle']) == openstates, 1)).any():\\n\",\n",
              "    '                    end_time = time.time()\\n',\n",
              "    '                    if (( end_time - start_time ) > 2):\\n',\n",
              "    '                        print(\" The 8 puzzle is unsolvable \\\\n\")\\n',\n",
              "    '                        break\\n',\n",
              "    '\\n',\n",
              "    '                    hn = misplaced_tiles(coordinates(openstates), costg)\\n',\n",
              "    '                    # generate and add new state in the list\\n',\n",
              "    '                    q = np.array([(openstates, position, gn, hn)], dtstate)\\n',\n",
              "    '                    state = np.append(state, q, 0)\\n',\n",
              "    '                    # f(n) is the sum of cost to reach node\\n',\n",
              "    '                    fn = gn + hn\\n',\n",
              "    '\\n',\n",
              "    '                    q = np.array([(len(state) - 1, fn)], dtpriority)\\n',\n",
              "    '                    priority = np.append(priority, q, 0)\\n',\n",
              "    '\\n',\n",
              "    '                    if np.array_equal(openstates, goal):\\n',\n",
              "    \"                        print(' The 8 puzzle is solvable \\\\n')\\n\",\n",
              "    '                        return state, len(priority)\\n',\n",
              "    '\\n',\n",
              "    '    return state, len(priority)\\n',\n",
              "    '\\n',\n",
              "    '\\n',\n",
              "    '# initial state\\n',\n",
              "    'puzzle = []\\n',\n",
              "    'puzzle.append(2)\\n',\n",
              "    'puzzle.append(8)\\n',\n",
              "    'puzzle.append(3)\\n',\n",
              "    'puzzle.append(7)\\n',\n",
              "    'puzzle.append(1)\\n',\n",
              "    'puzzle.append(4)\\n',\n",
              "    'puzzle.append(0)\\n',\n",
              "    'puzzle.append(6)\\n',\n",
              "    'puzzle.append(5)\\n',\n",
              "    '\\n',\n",
              "    '#goal state\\n',\n",
              "    'goal = []\\n',\n",
              "    '\\n',\n",
              "    'goal.append(1)\\n',\n",
              "    'goal.append(2)\\n',\n",
              "    'goal.append(3)\\n',\n",
              "    'goal.append(8)\\n',\n",
              "    'goal.append(0)\\n',\n",
              "    'goal.append(4)\\n',\n",
              "    'goal.append(7)\\n',\n",
              "    'goal.append(6)\\n',\n",
              "    'goal.append(5)\\n',\n",
              "    '\\n',\n",
              "    '\\n',\n",
              "    'state, visited = evaluvate_misplaced(puzzle, goal)\\n',\n",
              "    'bestpath = bestsolution(state)\\n',\n",
              "    \"print(str(bestpath).replace('[', ' ').replace(']', ''))\\n\",\n",
              "    'totalmoves = len(bestpath) - 1\\n',\n",
              "    \"print('\\\\nSteps to reach goal:',totalmoves)\\n\",\n",
              "    'visit = len(state) - visited\\n',\n",
              "    'print(\\'Total nodes visited: \\',visit, \"\\\\n\")']}]}"
            ]
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "{\n",
        "  \"nbformat\": 4,\n",
        "  \"nbformat_minor\": 0,\n",
        "  \"metadata\": {\n",
        "    \"colab\": {\n",
        "      \"provenance\": [],\n",
        "      \"authorship_tag\": \"ABX9TyPUiGHT/vG7PaWeoGCu7E4N\",\n",
        "\n",
        "    },\n",
        "    \"kernelspec\": {\n",
        "      \"name\": \"python3\",\n",
        "      \"display_name\": \"Python 3\"\n",
        "    },\n",
        "    \"language_info\": {\n",
        "      \"name\": \"python\"\n",
        "    }\n",
        "  },\n",
        "  \"cells\": [\n",
        "    {\n",
        "      \"cell_type\": \"markdown\",\n",
        "      \"metadata\": {\n",
        "        \"id\": \"view-in-github\",\n",
        "        \"colab_type\": \"text\"\n",
        "      },\n",
        "      \"source\": [\n",
        "        \"<a href=\\\"https://colab.research.google.com/github/2303a51840/2303a51840/blob/main/ASS2-PART%202%20A*\\\" target=\\\"_parent\\\"><img src=\\\"https://colab.research.google.com/assets/colab-badge.svg\\\" alt=\\\"Open In Colab\\\"/></a>\"\n",
        "      ]\n",
        "    },\n",
        "    {\n",
        "      \"cell_type\": \"code\",\n",
        "      \"execution_count\": 1,\n",
        "      \"metadata\": {\n",
        "        \"colab\": {\n",
        "          \"base_uri\": \"https://localhost:8080/\"\n",
        "        },\n",
        "        \"id\": \"Me368F7OTVhV\",\n",
        "        \"outputId\": \"eaa770b1-ef08-42d8-cea7-4eff517932a2\"\n",
        "      },\n",
        "      \"outputs\": [\n",
        "        {\n",
        "          \"output_type\": \"stream\",\n",
        "          \"name\": \"stdout\",\n",
        "          \"text\": [\n",
        "            \" The 8 puzzle is solvable \\n\",\n",
        "            \"\\n\",\n",
        "            \"   2 8 3\\n\",\n",
        "            \"   7 1 4\\n\",\n",
        "            \"   0 6 5\\n\",\n",
        "            \"\\n\",\n",
        "            \"   2 8 3\\n\",\n",
        "            \"   0 1 4\\n\",\n",
        "            \"   7 6 5\\n\",\n",
        "            \"\\n\",\n",
        "            \"   2 8 3\\n\",\n",
        "            \"   1 0 4\\n\",\n",
        "            \"   7 6 5\\n\",\n",
        "            \"\\n\",\n",
        "            \"   2 0 3\\n\",\n",
        "            \"   1 8 4\\n\",\n",
        "            \"   7 6 5\\n\",\n",
        "            \"\\n\",\n",
        "            \"   0 2 3\\n\",\n",
        "            \"   1 8 4\\n\",\n",
        "            \"   7 6 5\\n\",\n",
        "            \"\\n\",\n",
        "            \"   1 2 3\\n\",\n",
        "            \"   0 8 4\\n\",\n",
        "            \"   7 6 5\\n\",\n",
        "            \"\\n\",\n",
        "            \"   1 2 3\\n\",\n",
        "            \"   8 0 4\\n\",\n",
        "            \"   7 6 5\\n\",\n",
        "            \"\\n\",\n",
        "            \"Steps to reach goal: 6\\n\",\n",
        "            \"Total nodes visited:  11 \\n\",\n",
        "            \"\\n\"\n",
        "          ]\n",
        "        },\n",
        "        {\n",
        "          \"output_type\": \"stream\",\n",
        "          \"name\": \"stderr\",\n",
        "          \"text\": [\n",
        "            \"<ipython-input-1-1d5712b152d4>:67: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\\n\",\n",
        "            \"  blank = int(np.where(puzzle == 0)[0])\\n\"\n",
        "          ]\n",
        "        }\n",
        "      ],\n",
        "      \"source\": [\n",
        "        \"#Implementation of A* Algorithm / OR Graph Search\\n\",\n",
        "        \"\\n\",\n",
        "        \"\\n\",\n",
        "        \"from copy import deepcopy\\n\",\n",
        "        \"import numpy as np\\n\",\n",
        "        \"import time\\n\",\n",
        "        \"\\n\",\n",
        "        \"def bestsolution(state):\\n\",\n",
        "        \"    bestsol = np.array([], int).reshape(-1, 9)\\n\",\n",
        "        \"    count = len(state) - 1\\n\",\n",
        "        \"    while count != -1:\\n\",\n",
        "        \"        bestsol = np.insert(bestsol, 0, state[count]['puzzle'], 0)\\n\",\n",
        "        \"        count = (state[count]['parent'])\\n\",\n",
        "        \"    return bestsol.reshape(-1, 3, 3)\\n\",\n",
        "        \"\\n\",\n",
        "        \"\\n\",\n",
        "        \"# checks for the uniqueness of the iteration(it).\\n\",\n",
        "        \"def all(checkarray):\\n\",\n",
        "        \"    set=[]\\n\",\n",
        "        \"    for it in set:\\n\",\n",
        "        \"        for checkarray in it:\\n\",\n",
        "        \"            return 1\\n\",\n",
        "        \"        else:\\n\",\n",
        "        \"            return 0\\n\",\n",
        "        \"\\n\",\n",
        "        \"\\n\",\n",
        "        \"# number of misplaced tiles\\n\",\n",
        "        \"def misplaced_tiles(puzzle,goal):\\n\",\n",
        "        \"    mscost = np.sum(puzzle != goal) - 1\\n\",\n",
        "        \"    return mscost if mscost > 0 else 0\\n\",\n",
        "        \"\\n\",\n",
        "        \"\\n\",\n",
        "        \"def coordinates(puzzle):\\n\",\n",
        "        \"    pos = np.array(range(9))\\n\",\n",
        "        \"    for p, q in enumerate(puzzle):\\n\",\n",
        "        \"        pos[q] = p\\n\",\n",
        "        \"    return pos\\n\",\n",
        "        \"\\n\",\n",
        "        \"# start of 8 puzzle evaluvation, using Misplaced tiles heuristics\\n\",\n",
        "        \"def evaluvate_misplaced(puzzle, goal):\\n\",\n",
        "        \"    steps = np.array([('up', [0, 1, 2], -3),('down', [6, 7, 8],  3),('left', [0, 3, 6], -1),('right', [2, 5, 8],  1)],\\n\",\n",
        "        \"                dtype =  [('move',  str, 1),('position', list),('head', int)])\\n\",\n",
        "        \"\\n\",\n",
        "        \"    dtstate = [('puzzle',  list),('parent', int),('gn',  int),('hn',  int)]\\n\",\n",
        "        \"\\n\",\n",
        "        \"    costg = coordinates(goal)\\n\",\n",
        "        \"\\n\",\n",
        "        \"    # initializing the parent, gn and hn, where hn is misplaced_tiles  function call\\n\",\n",
        "        \"    parent = -1\\n\",\n",
        "        \"    gn = 0\\n\",\n",
        "        \"    hn = misplaced_tiles(coordinates(puzzle), costg)\\n\",\n",
        "        \"    state = np.array([(puzzle, parent, gn, hn)], dtstate)\\n\",\n",
        "        \"\\n\",\n",
        "        \"   #priority queues with position as keys and fn as value.\\n\",\n",
        "        \"    dtpriority = [('position', int),('fn', int)]\\n\",\n",
        "        \"\\n\",\n",
        "        \"    priority = np.array([(0, hn)], dtpriority)\\n\",\n",
        "        \"\\n\",\n",
        "        \"    while 1:\\n\",\n",
        "        \"        priority = np.sort(priority, kind='mergesort', order=['fn', 'position'])\\n\",\n",
        "        \"        position, fn = priority[0]\\n\",\n",
        "        \"        # sort priority queue using merge sort,the first element is picked for exploring.\\n\",\n",
        "        \"        priority = np.delete(priority, 0, 0)\\n\",\n",
        "        \"        puzzle, parent, gn, hn = state[position]\\n\",\n",
        "        \"        puzzle = np.array(puzzle)\\n\",\n",
        "        \"\\n\",\n",
        "        \"        blank = int(np.where(puzzle == 0)[0])\\n\",\n",
        "        \"\\n\",\n",
        "        \"        gn = gn + 1\\n\",\n",
        "        \"        c = 1\\n\",\n",
        "        \"        start_time = time.time()\\n\",\n",
        "        \"        for s in steps:\\n\",\n",
        "        \"            c = c + 1\\n\",\n",
        "        \"            if blank not in s['position']:\\n\",\n",
        "        \"                openstates = deepcopy(puzzle)\\n\",\n",
        "        \"                openstates[blank], openstates[blank + s['head']] = openstates[blank + s['head']], openstates[blank]\\n\",\n",
        "        \"\\n\",\n",
        "        \"                if ~(np.all(list(state['puzzle']) == openstates, 1)).any():\\n\",\n",
        "        \"                    end_time = time.time()\\n\",\n",
        "        \"                    if (( end_time - start_time ) > 2):\\n\",\n",
        "        \"                        print(\\\" The 8 puzzle is unsolvable \\\\n\\\")\\n\",\n",
        "        \"                        break\\n\",\n",
        "        \"\\n\",\n",
        "        \"                    hn = misplaced_tiles(coordinates(openstates), costg)\\n\",\n",
        "        \"                    # generate and add new state in the list\\n\",\n",
        "        \"                    q = np.array([(openstates, position, gn, hn)], dtstate)\\n\",\n",
        "        \"                    state = np.append(state, q, 0)\\n\",\n",
        "        \"                    # f(n) is the sum of cost to reach node\\n\",\n",
        "        \"                    fn = gn + hn\\n\",\n",
        "        \"\\n\",\n",
        "        \"                    q = np.array([(len(state) - 1, fn)], dtpriority)\\n\",\n",
        "        \"                    priority = np.append(priority, q, 0)\\n\",\n",
        "        \"\\n\",\n",
        "        \"                    if np.array_equal(openstates, goal):\\n\",\n",
        "        \"                        print(' The 8 puzzle is solvable \\\\n')\\n\",\n",
        "        \"                        return state, len(priority)\\n\",\n",
        "        \"\\n\",\n",
        "        \"    return state, len(priority)\\n\",\n",
        "        \"\\n\",\n",
        "        \"\\n\",\n",
        "        \"# initial state\\n\",\n",
        "        \"puzzle = []\\n\",\n",
        "        \"puzzle.append(2)\\n\",\n",
        "        \"puzzle.append(8)\\n\",\n",
        "        \"puzzle.append(3)\\n\",\n",
        "        \"puzzle.append(7)\\n\",\n",
        "        \"puzzle.append(1)\\n\",\n",
        "        \"puzzle.append(4)\\n\",\n",
        "        \"puzzle.append(0)\\n\",\n",
        "        \"puzzle.append(6)\\n\",\n",
        "        \"puzzle.append(5)\\n\",\n",
        "        \"\\n\",\n",
        "        \"#goal state\\n\",\n",
        "        \"goal = []\\n\",\n",
        "        \"\\n\",\n",
        "        \"goal.append(1)\\n\",\n",
        "        \"goal.append(2)\\n\",\n",
        "        \"goal.append(3)\\n\",\n",
        "        \"goal.append(8)\\n\",\n",
        "        \"goal.append(0)\\n\",\n",
        "        \"goal.append(4)\\n\",\n",
        "        \"goal.append(7)\\n\",\n",
        "        \"goal.append(6)\\n\",\n",
        "        \"goal.append(5)\\n\",\n",
        "        \"\\n\",\n",
        "        \"\\n\",\n",
        "        \"state, visited = evaluvate_misplaced(puzzle, goal)\\n\",\n",
        "        \"bestpath = bestsolution(state)\\n\",\n",
        "        \"print(str(bestpath).replace('[', ' ').replace(']', ''))\\n\",\n",
        "        \"totalmoves = len(bestpath) - 1\\n\",\n",
        "        \"print('\\\\nSteps to reach goal:',totalmoves)\\n\",\n",
        "        \"visit = len(state) - visited\\n\",\n",
        "        \"print('Total nodes visited: ',visit, \\\"\\\\n\\\")\"\n",
        "      ]\n",
        "    }\n",
        "  ]\n",
        "}"
      ]
    }
  ]
}